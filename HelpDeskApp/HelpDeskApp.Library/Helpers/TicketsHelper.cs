//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToModels.v3.2 (entitiesToModels.codeplex.com).
//     Timestamp: 2016/02/20 - 17:52:57
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using HelpDeskApp.Common.Models;
using HelpDeskApp.Entity;

namespace HelpDeskApp.Library.Helpers
{

    /// <summary>
    /// Assembler for <see cref="TICKETS"/> and <see cref="Tickets"/>.
    /// </summary>
    public static partial class TicketsHelper
    {
        /// <summary>
        /// Invoked when <see cref="ToModel"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="Tickets"/> converted from <see cref="TICKETS"/>.</param>
        static partial void OnDTO(this TICKETS entity, Tickets dto);

        /// <summary>
        /// Invoked when <see cref="ToTable"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="TICKETS"/> converted from <see cref="Tickets"/>.</param>
        static partial void OnEntity(this Tickets dto, TICKETS entity);

        public enum ESTATUS
        {
            ABIERTA = 1,
            PENDIENTE = 2,
            RESUELTA = 3,
            NO_RESUELTA = 4,
            CANCELADA = 5
        }

        /// <summary>
        /// Converts this instance of <see cref="Tickets"/> to an instance of <see cref="TICKETS"/>.
        /// </summary>
        /// <param name="dto"><see cref="Tickets"/> to convert.</param>
        public static TICKETS ToTable(this Tickets dto)
        {
            if (dto == null) return null;

            var entity = new TICKETS();

            entity.Id = dto.Id;
            entity.IssueId = dto.IssueId;
            entity.UserRequestId = dto.UserRequestId;
            entity.RequestDepartamentId = dto.RequestDepartamentId;
            entity.DestinationDivisionId = dto.DestinationDivisionId;
            entity.Estatus = dto.Estatus;
            entity.Fecha_Solicitud = DateTime.Now;
            entity.Fecha_Correcion = dto.Fecha_Correcion;
            entity.Fecha_Modificacion = dto.Fecha_Modificacion;
            entity.OrganizacionId = dto.OrganizacionId;
            entity.Titulo = dto.Titulo;
            entity.Descripcion = dto.Descripcion;
            entity.UserAssigned = dto.UserAssigned;

            dto.OnEntity(entity);

            return entity;
        }

        //public static Spc_Get_Ticket_By_Usr_Request ToModel(this SPC_GET_TICKET_BY_USR_REQUEST_Result Table)
        //{
        //    return new Spc_Get_Ticket_By_Usr_Request()
        //    {
        //        Id = Table.Id,
        //        Titulo = Table.Titulo,
        //        TicketDescrip = Table.TicketDescrip,
        //        IssueDescrip = Table.IssueDescrip,
        //        UsuarioRequest = Table.UsuarioRequest,
        //        DepartamentoDescrip = Table.DepartamentoDescrip,
        //        DivisionDescrip = Table.DivisionDescrip,
        //        Estatus = Table.Estatus,
        //        Fecha_Solicitud = Table.Fecha_Solicitud,
        //        Fecha_Correcion = Table.Fecha_Correcion,
        //        Fecha_Modificacion = Table.Fecha_Modificacion,
        //        OrganizacionDescrip = Table.OrganizacionDescrip,
        //        UsuarioAsignado = Table.UsuarioAsignado,
                


        //    };
        //}

        //public static Spc_Get_Ticket_By_Usr_Request ToTable(this SPC_GET_TICKET_BY_USR_REQUEST_Result Model)
        //{
        //    return new Spc_Get_Ticket_By_Usr_Request()
        //    {
        //        Id = Model.Id,
        //        Titulo = Model.Titulo,
        //        TicketDescrip = Model.TicketDescrip,
        //        IssueDescrip = Model.IssueDescrip,
        //        UsuarioRequest = Model.UsuarioRequest,
        //        DepartamentoDescrip = Model.DepartamentoDescrip,
        //        DivisionDescrip = Model.DivisionDescrip,
        //        Estatus = Model.Estatus,
        //        Fecha_Solicitud = Model.Fecha_Solicitud,
        //        Fecha_Correcion = Model.Fecha_Correcion,
        //        Fecha_Modificacion = Model.Fecha_Modificacion,
        //        OrganizacionDescrip = Model.OrganizacionDescrip,
        //        UsuarioAsignado = Model.UsuarioAsignado


        //    };
        //}

        //public static Spc_Get_All_Tickets_With_Descrip ToModel(this SPC_GET_ALL_TICKETS_WITH_DESCRIP_Result Table)
        //{
        //    return new Spc_Get_All_Tickets_With_Descrip()
        //    {
        //        Id = Table.Id,
        //        Titulo = Table.Titulo,
        //        TicketDescrip = Table.TicketDescrip,
        //        IssueDescrip = Table.IssueDescrip,
        //        UsuarioRequest = Table.UsuarioRequest,
        //        DepartamentoDescrip = Table.DepartamentoDescrip,
        //        DivisionDescrip = Table.DivisionDescrip,
        //        Estatus = Table.Estatus,
        //        Fecha_Solicitud = Table.Fecha_Solicitud,
        //        Fecha_Correcion = Table.Fecha_Correcion,
        //        Fecha_Modificacion = Table.Fecha_Modificacion,
        //        OrganizacionDescrip = Table.OrganizacionDescrip,
        //        UsuarioAsignado = Table.UsuarioAsignado,
        //        userAssignedId = Table.userAssignedId,
        //        userRequestId = Table.userRequestId


        //    };
        //}

        //public static SPC_GET_ALL_TICKETS_WITH_DESCRIP_Result ToTable(this Spc_Get_All_Tickets_With_Descrip Model)
        //{
        //    return new SPC_GET_ALL_TICKETS_WITH_DESCRIP_Result()
        //    {
        //        Id = Model.Id,
        //        Titulo = Model.Titulo,
        //        TicketDescrip = Model.TicketDescrip,
        //        IssueDescrip = Model.IssueDescrip,
        //        UsuarioRequest = Model.UsuarioRequest,
        //        DepartamentoDescrip = Model.DepartamentoDescrip,
        //        DivisionDescrip = Model.DivisionDescrip,
        //        Estatus = Model.Estatus,
        //        Fecha_Solicitud = Model.Fecha_Solicitud,
        //        Fecha_Correcion = Model.Fecha_Correcion,
        //        Fecha_Modificacion = Model.Fecha_Modificacion,
        //        OrganizacionDescrip = Model.OrganizacionDescrip,
        //        UsuarioAsignado = Model.UsuarioAsignado,
        //        userAssignedId = Model.userAssignedId,
        //        userRequestId = Model.userRequestId


        //    };
        //}

        //public static Spc_Get_Tickets_User_Followed_Result ToModel(this SPC_GET_TICKETS_USER_FOLLOWED_Result Table)
        //{
        //    return new Spc_Get_Tickets_User_Followed_Result()
        //    {
        //        Id = Table.Id,
        //        Titulo = Table.Titulo,
        //        TicketDescrip = Table.TicketDescrip,
        //        IssueDescrip = Table.IssueDescrip,
        //        UsuarioRequest = Table.UsuarioRequest,
        //        DepartamentoDescrip = Table.DepartamentoDescrip,
        //        DivisionDescrip = Table.DivisionDescrip,
        //        Estatus = Table.Estatus,
        //        Fecha_Solicitud = Table.Fecha_Solicitud,
        //        Fecha_Correcion = Table.Fecha_Correcion,
        //        Fecha_Modificacion = Table.Fecha_Modificacion,
        //        OrganizacionDescrip = Table.OrganizacionDescrip,
        //        UsuarioAsignado = Table.UsuarioAsignado,
        //        userAssignedId = Table.userAssignedId,
        //        userRequestId = Table.userRequestId

        //    };
        //}

        //public static SPC_GET_TICKETS_USER_FOLLOWED_Result ToTable(this Spc_Get_Tickets_User_Followed_Result Model)
        //{
        //    return new SPC_GET_TICKETS_USER_FOLLOWED_Result()
        //    {
        //        Id = Model.Id,
        //        Titulo = Model.Titulo,
        //        TicketDescrip = Model.TicketDescrip,
        //        IssueDescrip = Model.IssueDescrip,
        //        UsuarioRequest = Model.UsuarioRequest,
        //        DepartamentoDescrip = Model.DepartamentoDescrip,
        //        DivisionDescrip = Model.DivisionDescrip,
        //        Estatus = Model.Estatus,
        //        Fecha_Solicitud = Model.Fecha_Solicitud,
        //        Fecha_Correcion = Model.Fecha_Correcion,
        //        Fecha_Modificacion = Model.Fecha_Modificacion,
        //        OrganizacionDescrip = Model.OrganizacionDescrip,
        //        UsuarioAsignado = Model.UsuarioAsignado,
        //        userAssignedId = Model.userAssignedId,
        //        userRequestId = Model.userRequestId

        //    };
        //}

        /// <summary>
        /// Converts this instance of <see cref="TICKETS"/> to an instance of <see cref="Tickets"/>.
        /// </summary>
        /// <param name="entity"><see cref="TICKETS"/> to convert.</param>
        public static Tickets ToModel(this TICKETS entity)
        {
            if (entity == null) return null;

            var dto = new Tickets();

            dto.Id = entity.Id;
            dto.IssueId = entity.IssueId;
            dto.UserRequestId = entity.UserRequestId;
            dto.RequestDepartamentId = entity.RequestDepartamentId;
            dto.DestinationDivisionId = entity.DestinationDivisionId;
            dto.Estatus = entity.Estatus;
            dto.Fecha_Solicitud = entity.Fecha_Solicitud;
            dto.Fecha_Correcion = entity.Fecha_Correcion;
            dto.Fecha_Modificacion = entity.Fecha_Modificacion;
            dto.OrganizacionId = entity.OrganizacionId;
            dto.Titulo = entity.Titulo;
            dto.Descripcion = entity.Descripcion;
            dto.UserAssigned = entity.UserAssigned;


            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="Tickets"/> to an instance of <see cref="TICKETS"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<TICKETS> ToTables(this IEnumerable<Tickets> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToTable()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="TICKETS"/> to an instance of <see cref="Tickets"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<Tickets> ToModels(this IEnumerable<TICKETS> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToModel()).ToList();
        }

        public static bool Save(Tickets model)
        {
            bool result;

            using (HelpDeskApfEntities context = new HelpDeskApfEntities())
            {

                try
                {
                    context.TICKETS.Add(model.ToTable());
                    context.SaveChanges();
                    result = true;
                }
                catch (Exception)
                {

                    result = false;
                }

            }

            return result;
        }

        public static List<Tickets> GetAll()
        {
            List<Tickets> list;

            using (HelpDeskApfEntities context = new HelpDeskApfEntities())
            {
                var queryResult = context.TICKETS.ToList();
                list = queryResult.Count > 0 ? ToModels(queryResult) : new List<Tickets>();
            }
            return list;
        }

        public static List<Spc_Get_All_Tickets_With_Descrip> GetAllWithDescrip()
        {
            List<Spc_Get_All_Tickets_With_Descrip> list;

            using (HelpDeskApfEntities context = new HelpDeskApfEntities())
            {
                var queryResult = context.SPC_GET_ALL_TICKETS_WITH_DESCRIP().ToList();
                list = queryResult.Count > 0 ? queryResult.Select(x => x.ToModel()).ToList() : new List<Spc_Get_All_Tickets_With_Descrip>();
            }
            return list;
        }

        public static Tickets GetTicketByPrimaryKey(int Id)
        {
            Tickets Obj;

            using (HelpDeskApfEntities context = new HelpDeskApfEntities())
            {
                var queryResult = context.TICKETS.SingleOrDefault(a => a.Id == Id);
                Obj = ToModel(queryResult);
            }
            return Obj;

        }

        public static List<Spc_Get_Ticket_By_Usr_Request> GetTicketByUserRequest(string userName)
        {
            List<Spc_Get_Ticket_By_Usr_Request> Obj;

            using (HelpDeskApfEntities context = new HelpDeskApfEntities())
            {
                var queryResult = context.SPC_GET_TICKET_BY_USR_REQUEST(userName).ToList();
                Obj = queryResult.Count > 0 ? queryResult.Select(x => x.ToModel()).ToList() : new List<Spc_Get_Ticket_By_Usr_Request>();
            }
            return Obj;

        }

        public static bool updateTicket(Tickets Model)
        {
            bool result;

            using (HelpDeskApfEntities context = new HelpDeskApfEntities())
            {
                var ticket = context.TICKETS.FirstOrDefault(t => t.Id == Model.Id);
                try
                {
                    ticket.IssueId = Model.IssueId;
                    ticket.DestinationDivisionId = Model.DestinationDivisionId;
                    ticket.OrganizacionId = Model.OrganizacionId;
                    ticket.RequestDepartamentId = Model.RequestDepartamentId;
                    ticket.UserAssigned = Model.UserAssigned;
                    ticket.UserRequestId = Model.UserRequestId;
                    ticket.Titulo = Model.Titulo;
                    ticket.Descripcion = Model.Descripcion;
                    ticket.Fecha_Modificacion = DateTime.Now;

                    context.SaveChanges();
                    result = true;
                }
                catch (Exception)
                {

                    result = false;
                }
            }

            return result;
        }

        public static bool CloseTicket(Tickets Model)
        {
            bool result;

            using (HelpDeskApfEntities context = new HelpDeskApfEntities())
            {
                var ticket = context.TICKETS.FirstOrDefault(t => t.Id == Model.Id);
                try
                {
                    ticket.Fecha_Modificacion = DateTime.Now;
                    ticket.Fecha_Correcion = DateTime.Now;
                    ticket.Estatus = ((int)ESTATUS.RESUELTA);

                    context.SaveChanges();
                    result = true;
                }
                catch (Exception)
                {

                    result = false;
                }
            }

            return result;
        }

        public static List<Spc_Get_Tickets_User_Followed_Result> GetTicketsFromUsersFollowed(int UsrId)
        {
            List<Spc_Get_Tickets_User_Followed_Result> Obj;

            using (HelpDeskApfEntities context = new HelpDeskApfEntities())
            {
                var queryResult = context.SPC_GET_TICKETS_USER_FOLLOWED(UsrId).ToList();
                Obj = queryResult.Count > 0 ? queryResult.Select(x => x.ToModel()).ToList() : new List<Spc_Get_Tickets_User_Followed_Result>();
            }
            return Obj;

        }

        

    }
}
